package main

import (
	"flag"
	"fmt"
	"os"
	"strings"

	"github.com/modulo-srl/mu-config/json2struct/encoder"
)

const version = "json2struct 1.5"

func usage() {
	println(version)
	println("Usage: json2struct [flags] filename.json")
	flag.PrintDefaults()
}

func die(err error) {
	fmt.Fprintf(os.Stderr, "Error: %s\n", err)
	os.Exit(1)
}

func main() {
	ver := flag.Bool("version", false, "Show tool version")
	structName := flag.String("declare", "data", "Main struct name, and prefix for inner structs")
	funcValues := flag.String("values", "default", "Function name prefix (\"prefix<StructName>()\") that returns the prefilled struct with values (blank for none)")
	constRaw := flag.String("raw", "raw", "Const name that contains original file content (blank for none)")
	pkg := flag.String("pkg", "config", "Package name (blank for none)")
	f64 := flag.Bool("f64", false, "Force 64bit for integer and float")
	warn := flag.Bool("warn", true, "Generate warning header")
	outFile := flag.String("out", "", "Save to file instead of stdout")

	flag.Parse()

	var filename string

	if *ver {
		println(version)
		return
	}

	if flag.NArg() == 0 || *structName == "" {
		usage()
		return
	}

	filename = flag.Arg(0)
	out := ""

	if *warn {
		out += "// Code generated by " + version + ". (@generated) DO NOT EDIT.\n" +
			"// cmdline: `" + strings.Join(os.Args, " ") + "`\n\n"
	}

	if *pkg != "" {
		out += "package " + *pkg + "\n\n"
	}

	decoded, err := encoder.JSONToStructs(filename, *structName, *f64)
	if err != nil {
		die(err)
	}
	out += decoded

	if *funcValues != "" {
		decoded, err := encoder.JSONToValues(filename, *funcValues, *structName, *f64)
		if err != nil {
			die(err)
		}
		out += decoded
	}

	if *constRaw != "" {
		raw, err := encoder.IncludeRaw(filename, *constRaw)
		if err != nil {
			die(err)
		}
		out += raw
	}

	if *outFile != "" {
		err := encoder.WriteFile(*outFile, out)
		if err != nil {
			die(err)
		}
	} else {
		fmt.Println(out)
	}
}
