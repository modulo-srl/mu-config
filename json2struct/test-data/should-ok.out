type Test struct {
	BasicTypes	Test_BasicTypes	`json:"Basic-types"`
	NestedTypes	Test_NestedTypes	`json:"Nested_Types"`
	ArrayTypes	Test_ArrayTypes	`json:"Array-Types"`
}

type Test_BasicTypes struct {
	ParamString	string	`json:"ParamString"`
	ParamBool	bool	`json:"ParamBool"`
	ParamInt	int	`json:"ParamInt"`
	ParamFloat	float64	`json:"ParamFloat"`
}

type Test_NestedTypes struct {
	Foo	string	`json:"foo"`
	NestedChild	Test_NestedTypes_NestedChild	`json:"NestedChild"`
}

type Test_NestedTypes_NestedChild struct {
	Foo	string	`json:"foo"`
	DeepNested	Test_NestedTypes_NestedChild_DeepNested	`json:"DeepNested"`
}

type Test_NestedTypes_NestedChild_DeepNested struct {
	Foo	string	`json:"foo"`
}

type Test_ArrayTypes struct {
	Integers	[]int	`json:"Integers"`
	Booleans	[]bool	`json:"Booleans"`
	Floats	[]float64	`json:"Floats"`
	Strings	[]string	`json:"Strings"`
	Objects	[]Test_ArrayTypes_ObjectsItem	`json:"Objects"`
}

type Test_ArrayTypes_ObjectsItem struct {
	Foo	string	`json:"foo"`
	Bar	int	`json:"bar"`
	Nested1	Test_ArrayTypes_ObjectsItem_Nested1	`json:"nested1"`
	Nested2	[]Test_ArrayTypes_ObjectsItem_Nested2Item	`json:"nested2"`
}

type Test_ArrayTypes_ObjectsItem_Nested1 struct {
	NestedProp	bool	`json:"nested-prop"`
}

type Test_ArrayTypes_ObjectsItem_Nested2Item struct {
	Foo	Test_ArrayTypes_ObjectsItem_Nested2Item_Foo	`json:"foo"`
}

type Test_ArrayTypes_ObjectsItem_Nested2Item_Foo struct {
	NestedProp	bool	`json:"nested-prop"`
}

func defaultTest() Test {
	return Test{

		BasicTypes: Test_BasicTypes{
			ParamString: "ParamValue \n \"test\"",
			ParamBool: true,
			ParamInt: 12,
			ParamFloat: 1.234,
		},

		NestedTypes: Test_NestedTypes{
			Foo: "bar",

			NestedChild: Test_NestedTypes_NestedChild{
				Foo: "bar",

				DeepNested: Test_NestedTypes_NestedChild_DeepNested{
					Foo: "bar",
				},
			},
		},

		ArrayTypes: Test_ArrayTypes{
			Integers: []int{1, 2, 3},
			Booleans: []bool{true, false, true},
			Floats: []float64{1.0, 2.0, 3.0},
			Strings: []string{"a", "b", "c"},
			Objects: []Test_ArrayTypes_ObjectsItem{
				{
					Foo: "",
					Bar: 0,
				},
				{
					Foo: "bar",

					Nested1: Test_ArrayTypes_ObjectsItem_Nested1{
						NestedProp: true,
					},
				},
				{
					Nested2: []Test_ArrayTypes_ObjectsItem_Nested2Item{
						{

							Foo: Test_ArrayTypes_ObjectsItem_Nested2Item_Foo{
								NestedProp: true,
							},
						},
					},
				},
			},
		},
	}
}


